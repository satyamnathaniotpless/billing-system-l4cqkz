# Default values for wallet-service Helm chart
# This is a YAML-formatted file.

# Image configuration
image:
  repository: otpless/wallet-service
  # golang:1.20-alpine based image as per container strategy
  tag: "1.0.0"
  pullPolicy: IfNotPresent
  # Optional digest for immutable tags
  # digest: sha256:abc123...

# Override chart name if needed
nameOverride: ""
fullnameOverride: ""

# Deployment configuration
deployment:
  # High availability with minimum 3 replicas
  replicas: 3
  
  # Zero-downtime updates with rolling deployment
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  # Pod annotations for monitoring and vault integration
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "wallet-service"
    vault.hashicorp.com/agent-inject-secret-database: "database/creds/wallet-service"
    vault.hashicorp.com/agent-inject-template-database: |
      {{- with secret "database/creds/wallet-service" -}}
      {
        "username": "{{ .Data.username }}",
        "password": "{{ .Data.password }}"
      }
      {{- end -}}

  # Resource limits as per container strategy
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1"
      memory: "2Gi"

  # Enhanced security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault

  # Pod scheduling configuration
  nodeSelector:
    kubernetes.io/os: linux
    node.kubernetes.io/purpose: app

  # Pod topology spread
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfied: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: wallet-service

  # Pod anti-affinity for high availability
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app: wallet-service
            topologyKey: topology.kubernetes.io/zone

  # Pod tolerations
  tolerations: []

# Service configuration
service:
  type: ClusterIP
  ports:
    http:
      port: 8080
      targetPort: 8080
      protocol: TCP
    metrics:
      port: 9090
      targetPort: 9090
      protocol: TCP

# Application configuration
config:
  database:
    host: "postgres-rw.otpless.svc.cluster.local"
    port: 5432
    sslMode: "verify-full"
    connTimeout: "30s"
    maxOpenConns: 50
    maxIdleConns: 10
    connMaxLifetime: "1h"
    enableMigrations: true

  redis:
    host: "redis.otpless.svc.cluster.local"
    port: 6379
    db: 0
    ttl: "30s"
    maxRetries: 3
    poolSize: 20
    enableTLS: true

  api:
    port: 8080
    readTimeout: "5s"
    writeTimeout: "10s"
    shutdownTimeout: "30s"
    maxRequestSize: "1MB"
    enableCompression: true
    corsEnabled: true
    corsAllowedOrigins: ["https://*.otpless.com"]

  security:
    rateLimit: 1000  # Support 1000+ events/second
    rateLimitWindow: "1m"
    tlsVersion: "TLS1.3"
    enableAudit: true
    enableMTLS: true
    jwtIssuer: "https://auth.otpless.com"
    jwtAudience: "wallet-service"

# Health check probes
probes:
  liveness:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readiness:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  startup:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 30

# Horizontal Pod Autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60

# Prometheus ServiceMonitor configuration
serviceMonitor:
  enabled: true
  interval: "30s"
  scrapeTimeout: "10s"
  labels:
    release: prometheus

# Pod Disruption Budget for high availability
podDisruptionBudget:
  enabled: true
  minAvailable: 2