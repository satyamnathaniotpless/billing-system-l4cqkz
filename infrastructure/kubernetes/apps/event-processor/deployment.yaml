# Event Processor Deployment
# Version: 1.0.0
# Purpose: High-throughput event processing service deployment configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: event-processor
  namespace: otpless-billing
  labels:
    app: event-processor
    component: backend
    part-of: billing-system
    version: v1
  annotations:
    kubernetes.io/change-cause: "Initial deployment of event processor service"
    deployment.kubernetes.io/revision: "1"
    description: "Handles high-throughput usage event ingestion and processing"
spec:
  # High availability with 3 replicas for load distribution
  replicas: 3
  # Zero-downtime rolling updates
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: event-processor
  template:
    metadata:
      labels:
        app: event-processor
        version: v1
      annotations:
        # Prometheus metrics scraping configuration
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        # ConfigMap checksum for automatic pod updates on config changes
        checksum/config: "${CONFIG_CHECKSUM}"
    spec:
      # Allow graceful shutdown for in-flight requests
      terminationGracePeriodSeconds: 60
      containers:
        - name: event-processor
          # Using Node.js 18 Alpine for lightweight container
          image: node:18-alpine # version: 18-alpine
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          # Resource limits as per container strategy
          resources:
            requests:
              cpu: "1"
              memory: "2Gi"
            limits:
              cpu: "2"
              memory: "4Gi"
          # Health check probes
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 30
          # Mount configuration from ConfigMap
          envFrom:
            - configMapRef:
                name: event-processor-config
          # Security context for container
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
      # Pod security context
      securityContext:
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      # Pod distribution and availability rules
      affinity:
        # Prefer scheduling pods on different nodes
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - event-processor
                topologyKey: kubernetes.io/hostname
        # Schedule only on worker nodes
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/worker
                    operator: Exists
      # Ensure even pod distribution across zones
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: event-processor