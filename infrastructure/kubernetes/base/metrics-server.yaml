# Metrics Server Kubernetes Manifest v0.6.1
# Purpose: Deploys metrics-server with high availability, security and monitoring features
# External Image: k8s.gcr.io/metrics-server:v0.6.1

---
# ServiceAccount for metrics-server with appropriate labels
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-server
  namespace: monitoring
  labels:
    app: metrics-server
    component: monitoring

---
# ClusterRole defining RBAC permissions for metrics collection
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:metrics-server
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes", "nodes/stats", "namespaces"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding to bind ServiceAccount to ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: monitoring

---
# Metrics Server Deployment with HA configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-server
  namespace: monitoring
  labels:
    app: metrics-server
    component: monitoring
spec:
  replicas: 2  # HA configuration with 2 replicas
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: metrics-server
  template:
    metadata:
      labels:
        app: metrics-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8443"
    spec:
      serviceAccountName: metrics-server
      priorityClassName: system-cluster-critical
      containers:
      - name: metrics-server
        image: k8s.gcr.io/metrics-server:v0.6.1
        args:
        - --kubelet-insecure-tls
        - --kubelet-preferred-address-types=InternalIP
        - --metric-resolution=15s  # Enhanced metric collection frequency
        - --kubelet-use-node-status-port
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 50m
            memory: 150Mi
        livenessProbe:
          httpGet:
            path: /livez
            port: https
            scheme: HTTPS
          initialDelaySeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: https
            scheme: HTTPS
          initialDelaySeconds: 20
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - metrics-server
            topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"

---
# Service to expose metrics-server
apiVersion: v1
kind: Service
metadata:
  name: metrics-server
  namespace: monitoring
  labels:
    app: metrics-server
    component: monitoring
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: https
  selector:
    app: metrics-server