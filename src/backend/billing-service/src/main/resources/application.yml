# Spring Boot Application Configuration v3.1.x
# OTPless Billing Service Configuration

spring:
  application:
    name: billing-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
  
  # Database Configuration
  datasource:
    url: ${POSTGRES_URL}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      max-lifetime: 1200000
      leak-detection-threshold: 60000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 50
        order_inserts: true
        order_updates: true

  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI}
          jwk-set-uri: ${JWT_JWK_SET_URI}
    headers:
      frame-options: DENY
      content-type-options: nosniff
      content-security-policy: "default-src 'self'; frame-ancestors 'none'"
      referrer-policy: strict-origin-when-cross-origin
      permitted-cross-domain-policies: none

  # Cache Configuration
  cache:
    type: redis
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      timeout: 2000
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 2
          max-wait: 1000

# Server Configuration
server:
  port: 8080

# Kafka Configuration
kafka:
  bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
  consumer:
    group-id: billing-service-group
    auto-offset-reset: earliest
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    max:
      poll:
        records: 500
        interval:
          ms: 300000
    session:
      timeout:
        ms: 45000
    heartbeat:
      interval:
        ms: 10000
    concurrency: 3
    retry:
      backoff:
        initial:
          interval: 1000
        max:
          interval: 10000
        multiplier: 2.0

  producer:
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.apache.kafka.common.serialization.StringSerializer
    acks: all
    retries: 3
    batch:
      size: 16384
    linger:
      ms: 1
    buffer:
      memory: 33554432

  topics:
    usage-events: usage-events
    billing-events: billing-events
    dead-letter: billing-dead-letter

# Management & Monitoring Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus,info
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  metrics:
    tags:
      application: billing-service
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
    enable:
      jvm: true
  tracing:
    sampling:
      probability: 1.0
    baggage:
      correlation:
        enabled: true

# Logging Configuration
logging:
  level:
    root: INFO
    com.otpless.billing: DEBUG
    org.springframework: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /var/log/billing-service/application.log
    max-size: 10MB
    max-history: 10

# Resilience4j Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      billingService:
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        slidingWindowSize: 100
        permittedNumberOfCallsInHalfOpenState: 10
  ratelimiter:
    instances:
      billingApi:
        limitForPeriod: 1000
        limitRefreshPeriod: 1m
        timeoutDuration: 5s

---
# Local Profile Configuration
spring:
  config:
    activate:
      on-profile: local
  jpa:
    show-sql: true
logging:
  level:
    com.otpless.billing: DEBUG

---
# Production Profile Configuration
spring:
  config:
    activate:
      on-profile: production
server:
  port: 8080
spring:
  jpa:
    show-sql: false
logging:
  level:
    root: INFO
management:
  metrics:
    export:
      prometheus:
        enabled: true