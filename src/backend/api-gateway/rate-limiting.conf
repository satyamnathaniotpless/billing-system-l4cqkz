# NGINX Rate Limiting Configuration v1.0
# For use with NGINX v1.20+
# Purpose: Implements multi-layer rate limiting for OTPless Internal Billing System API Gateway

# Define shared memory zones for rate limiting
limit_req_zone $binary_remote_addr zone=ip_rate:20m rate=1000r/m sync;
limit_req_zone $http_x_api_key zone=apikey_rate:50m rate=10000r/m sync;
limit_req_zone $http_x_api_key$uri zone=endpoint_rate:100m rate=variable sync;

# Global rate limiting settings
limit_req_status 429;
limit_req_log_level error;

# Custom log format for rate limiting monitoring
log_format rate_limit_log '$time_local | $remote_addr | $http_x_api_key | $request_uri | '
                         '$status | $limit_req_status | $limit_left | $limit_reset | '
                         '$http_user_agent | $http_referer';

# Rate limiting rules by endpoint
map $request_uri $endpoint_limit {
    default                     "1000r/m";
    "~^/api/events"            "1000r/m";
    "~^/api/billing"           "10000r/m";
    "~^/api/invoices"          "5000r/m";
    "~^/api/wallet"            "8000r/m";
}

# Rate limiting configuration blocks
location /api/events {
    limit_req zone=ip_rate burst=200 nodelay;
    limit_req zone=apikey_rate burst=200 nodelay;
    limit_req zone=endpoint_rate burst=200 nodelay;
    
    # Rate limit headers
    add_header X-RateLimit-Limit $limit_rate always;
    add_header X-RateLimit-Remaining $limit_left always;
    add_header X-RateLimit-Reset $limit_reset always;
    add_header X-RateLimit-Policy "1000 requests per minute" always;
}

location /api/billing {
    limit_req zone=apikey_rate burst=1000 nodelay;
    limit_req zone=endpoint_rate burst=1000 nodelay;
    
    add_header X-RateLimit-Limit $limit_rate always;
    add_header X-RateLimit-Remaining $limit_left always;
    add_header X-RateLimit-Reset $limit_reset always;
    add_header X-RateLimit-Policy "10000 requests per minute" always;
}

location /api/invoices {
    limit_req zone=apikey_rate burst=500 nodelay;
    limit_req zone=endpoint_rate burst=500 nodelay;
    
    add_header X-RateLimit-Limit $limit_rate always;
    add_header X-RateLimit-Remaining $limit_left always;
    add_header X-RateLimit-Reset $limit_reset always;
    add_header X-RateLimit-Policy "5000 requests per minute" always;
}

location /api/wallet {
    limit_req zone=apikey_rate burst=800 nodelay;
    limit_req zone=endpoint_rate burst=800 nodelay;
    
    add_header X-RateLimit-Limit $limit_rate always;
    add_header X-RateLimit-Remaining $limit_left always;
    add_header X-RateLimit-Reset $limit_reset always;
    add_header X-RateLimit-Policy "8000 requests per minute" always;
}

# Error response for rate limiting
error_page 429 = @rate_limit_exceeded;

location @rate_limit_exceeded {
    internal;
    default_type application/json;
    add_header Retry-After 60;
    add_header X-RateLimit-Limit $limit_rate;
    add_header X-RateLimit-Remaining $limit_left;
    add_header X-RateLimit-Reset $limit_reset;
    add_header X-RateLimit-Policy $limit_policy;
    return 429 '{"error":"Rate limit exceeded","message":"Please reduce request rate or contact support for limit increases","code":"RATE_LIMIT_EXCEEDED","retry_after":60}';
}

# Monitoring metrics configuration
location = /nginx_status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    deny all;
}

# Alert thresholds for monitoring
map $limit_req_status $alert_rejected {
    default 0;
    "rejected" 1;
}

map $limit_req_zone_usage $alert_zone_usage {
    default 0;
    "~^0.[8-9][0-9]*$" 1;  # Alert when zone usage > 80%
}

# Access log configuration for rate limiting monitoring
access_log /var/log/nginx/rate_limit.log rate_limit_log if=$alert_rejected;