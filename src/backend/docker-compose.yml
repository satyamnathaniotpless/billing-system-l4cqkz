version: "3.8"

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: billing-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-billing}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-billing}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - billing_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  timescaledb:
    image: timescale/timescaledb:2.11.0-pg15
    container_name: billing-timescaledb
    environment:
      POSTGRES_USER: ${TIMESCALE_USER:-postgres}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-postgres}
      POSTGRES_DB: ${TIMESCALE_DB:-events}
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALE_USER:-postgres} -d ${TIMESCALE_DB:-events}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - billing_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7.0-alpine
    container_name: billing-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - billing_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: billing-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - billing_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: billing-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - billing_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Application Services
  event-processor:
    build:
      context: ./event-processor
      dockerfile: Dockerfile
    container_name: billing-event-processor
    depends_on:
      - kafka
      - timescaledb
    environment:
      NODE_ENV: development
      KAFKA_BROKERS: kafka:29092
      TIMESCALE_URL: postgres://postgres:postgres@timescaledb:5432/events
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - billing_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  billing-service:
    build:
      context: ./billing-service
      dockerfile: Dockerfile
    container_name: billing-billing-service
    depends_on:
      - postgres
      - kafka
      - redis
    environment:
      SPRING_PROFILES_ACTIVE: development
      POSTGRES_URL: jdbc:postgresql://postgres:5432/billing
      KAFKA_BROKERS: kafka:29092
      REDIS_HOST: redis
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - billing_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 6G

  wallet-service:
    build:
      context: ./wallet-service
      dockerfile: Dockerfile
    container_name: billing-wallet-service
    depends_on:
      - postgres
      - redis
    environment:
      GIN_MODE: debug
      POSTGRES_URL: postgres://postgres:postgres@postgres:5432/billing
      REDIS_URL: redis://redis:6379
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - billing_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  invoice-service:
    build:
      context: ./invoice-service
      dockerfile: Dockerfile
    container_name: billing-invoice-service
    depends_on:
      - postgres
    environment:
      POSTGRES_URL: postgresql://postgres:postgres@postgres:5432/billing
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - billing_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

networks:
  billing_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  timescaledb_data:
    driver: local
  redis_data:
    driver: local